# kiboude-pepin - Tests & d√©ploiement

## Architecture

L'application kiboude-pepin est une application de gestion de Produit en mode _Single Page Application_ (SPA) d√©coup√©e en deux projets :

- un serveur d'API REST, dans le r√©pertoire `api`
- une application client Web, dans le r√©pertoire `client`.

L'application `api` utilise principalement les technologies suivantes :

- base de donn√©es [PostgreSQL](https://www.postgresql.org/)
- serveur Web [Express](http://expressjs.com/)
- biblioth√®que de validation de donn√©es [joi](https://joi.dev/)
- ORM [Sequelize](https://sequelize.org/)

L'application `client` utilise principalement :

- le framework [React](https://reactjs.org/)
- le bundler [Vite](https://vitejs.dev/)

## Installation et configuration

### Lancer le projet sans docker

- pr√©parer une base de donn√©es pour stocker les donn√©es du projet
- installer les d√©pendances des deux projets avec `pnpm install` depuis la racine du projet.
  - note : un doc pnpm-workspace.yaml est present dans √† la racine du projet pour installer les d√©pendances des deux projets avec `pnpm install` depuis la racine du projet.
- dans les projets `api` et `client` : `cp .env.example .env`

  - penser √† modifier ce qui doit l'√™tre !
  - attention : le fichier .env dans le dossier api doit contenir les informations de connexion √† la base de donn√©es. `DB_HOST=database` n'est donc pas valide car il faudrait lancer le projet avec docker. la passer par `DB_HOST=localhost` pour l'utiliser en local sans docker.

- √† la premi√®re installation :
  - `pnpm run db:create` : cr√©er la structure de la base de donn√©es
  - `pnpm run db:seed` : ins√©rer des donn√©es
- si besoin de r√©initialiser la base de donn√©es : `pnpm run db:reset`

  - Note : depuis le dossier racine du projet : `pnpm run db:reset` permet de lancer les scripts `db:create` puis `db:seed` dans le dossier `api` afin de remettre en place une base de donn√©e propre.

  - lancer le projet avec `pnpm run dev` depuis le dossier racine du projet.
    - note : ou aller dans le dossier `api` et lancer `pnpm run dev` ou dans le dossier `client` et lancer `pnpm run dev`

## Lancer le projet avec docker

- Ne pas oublier de modifier le fichier .env dans le dossier et de la placer dans le dossier racine et non dans le api avec des informations de connexion √† la base de donn√©es. (`DB_HOST=database`) pour les autres variables d'environnement, elles peuvent √™tre inscritent de facon random on pense au password et secret par contre.üß†
- dans le dossier racine du projet : `docker-compose up --build` pour construire et lancer les containers

```bash
docker-compose up --build
```

- ensuite ne pas oublier de seed la base de donn√©e avec les donn√©es initiales :

```bash
docker-compose exec api npm run db:reset
```

- pour acc√©der au container de l'api depuis le container si besoin :

```bash
docker-compose exec api bash
```

- pour acc√©der au container du client depuis le container si besoin :

```bash
docker-compose exec client bash
```

- pour plus d'infos sur les commandes docker : [docker](https://docs.docker.com/engine/reference/commandline/docker/)
